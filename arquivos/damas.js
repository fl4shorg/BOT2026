const axios = require('axios');

const partidasAtivas = new Map();

const PECA_BRANCA = 'B';
const PECA_PRETA = 'P';
const DAMA_BRANCA = 'DB';
const DAMA_PRETA = 'DP';
const VAZIO = null;

function criarTabuleiro() {
    const tabuleiro = Array(8).fill(null).map(() => Array(8).fill(VAZIO));
    
    for (let row = 0; row < 3; row++) {
        for (let col = 0; col < 8; col++) {
            if ((row + col) % 2 === 1) {
                tabuleiro[row][col] = PECA_PRETA;
            }
        }
    }
    
    for (let row = 5; row < 8; row++) {
        for (let col = 0; col < 8; col++) {
            if ((row + col) % 2 === 1) {
                tabuleiro[row][col] = PECA_BRANCA;
            }
        }
    }
    
    return tabuleiro;
}

async function iniciarPartida(chatId, jogador1, jogador2) {
    if (partidasAtivas.has(chatId)) {
        return {
            sucesso: false,
            mensagem: "‚ö†Ô∏è J√° existe uma partida ativa neste chat!\n\nüí° Use `.damasparar` para encerrar a partida atual."
        };
    }
    
    const tabuleiro = criarTabuleiro();
    
    const partida = {
        tabuleiro,
        jogadorBranco: jogador1,
        jogadorPreto: jogador2,
        vezDe: jogador1,
        turno: 'branco',
        movimentos: 0,
        iniciado: Date.now(),
        ultimoMovimento: null
    };
    
    partidasAtivas.set(chatId, partida);
    
    const jogador1Nome = jogador1.split('@')[0];
    const jogador2Nome = jogador2.split('@')[0];
    
    return {
        sucesso: true,
        mensagem: `üé≤ *JOGO DE DAMAS INICIADO!*

‚ôüÔ∏è *Jogadores:*
‚ö™ Brancas: @${jogador1Nome}
‚ö´ Pretas: @${jogador2Nome}

üéØ *Vez de:* @${jogador1Nome} (‚ö™ Brancas)

üìç *Como jogar:*
Use: \`.damasjogada origem destino\`
Exemplo: \`.damasjogada c3 d4\`

üìã *Comandos:*
‚Ä¢ \`.damastabuleiro\` - Ver tabuleiro
‚Ä¢ \`.damasparar\` - Encerrar partida
‚Ä¢ \`.damasajuda\` - Ver regras

üéÆ *Boa sorte!*`,
        mentions: [jogador1, jogador2],
        imagem: await gerarImagemTabuleiro(tabuleiro, 'branco')
    };
}

async function fazerJogada(chatId, jogadorId, origem, destino) {
    const partida = partidasAtivas.get(chatId);
    
    if (!partida) {
        return {
            sucesso: false,
            mensagem: "‚ö†Ô∏è N√£o h√° partida ativa neste chat!\n\nüí° Use `.damas @oponente` para iniciar uma partida."
        };
    }
    
    if (partida.vezDe !== jogadorId) {
        const vezDeNome = partida.vezDe.split('@')[0];
        return {
            sucesso: false,
            mensagem: `‚ö†Ô∏è N√£o √© sua vez!\n\nüéØ Aguarde @${vezDeNome} jogar.`,
            mentions: [partida.vezDe]
        };
    }
    
    const origemPos = coordenadaParaPosicao(origem);
    const destinoPos = coordenadaParaPosicao(destino);
    
    if (!origemPos || !destinoPos) {
        return {
            sucesso: false,
            mensagem: "‚ùå Coordenadas inv√°lidas!\n\nüìç Use formato: a1-h8\nExemplo: `.damasjogada c3 d4`"
        };
    }
    
    const validacao = validarMovimento(partida, origemPos, destinoPos, jogadorId);
    
    if (!validacao.valido) {
        return {
            sucesso: false,
            mensagem: `‚ùå ${validacao.mensagem}`
        };
    }
    
    executarMovimento(partida, origemPos, destinoPos, validacao);
    
    verificarVitoria(partida);
    
    if (partida.vencedor) {
        const vencedorNome = partida.vencedor.split('@')[0];
        const perdedorNome = (partida.vencedor === partida.jogadorBranco ? partida.jogadorPreto : partida.jogadorBranco).split('@')[0];
        
        const mensagem = `üèÜ *VIT√ìRIA!*

üëë @${vencedorNome} venceu a partida!

üìä *Estat√≠sticas:*
‚è±Ô∏è Dura√ß√£o: ${Math.floor((Date.now() - partida.iniciado) / 1000)}s
üéØ Movimentos: ${partida.movimentos}

üéÆ Use \`.damas @oponente\` para jogar novamente!`;
        
        partidasAtivas.delete(chatId);
        
        return {
            sucesso: true,
            mensagem,
            mentions: [partida.vencedor],
            imagem: await gerarImagemTabuleiro(partida.tabuleiro, partida.turno)
        };
    }
    
    const proximoJogador = partida.vezDe === partida.jogadorBranco ? partida.jogadorPreto : partida.jogadorBranco;
    partida.vezDe = proximoJogador;
    partida.turno = partida.turno === 'branco' ? 'preto' : 'branco';
    partida.movimentos++;
    
    const jogadorNome = proximoJogador.split('@')[0];
    const movimentoTexto = validacao.captura ? `${origem} captura ${destino}` : `${origem} ‚Üí ${destino}`;
    
    return {
        sucesso: true,
        mensagem: `${validacao.captura ? 'üéØ CAPTURA!' : '‚úÖ Movimento realizado!'}

üìç ${movimentoTexto}
${validacao.coroou ? 'üëë PE√áA COROADA!' : ''}

üéØ *Vez de:* @${jogadorNome} (${partida.turno === 'branco' ? '‚ö™ Brancas' : '‚ö´ Pretas'})

üìä Movimento ${partida.movimentos}`,
        mentions: [proximoJogador],
        imagem: gerarImagemTabuleiro(partida.tabuleiro, partida.turno)
    };
}

function coordenadaParaPosicao(coord) {
    if (!coord || coord.length !== 2) return null;
    
    const coluna = coord[0].toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0);
    const linha = 8 - parseInt(coord[1]);
    
    if (coluna < 0 || coluna > 7 || linha < 0 || linha > 7 || isNaN(linha)) {
        return null;
    }
    
    return { linha, coluna };
}

function posicaoParaCoordenada(linha, coluna) {
    return String.fromCharCode('a'.charCodeAt(0) + coluna) + (8 - linha);
}

function validarMovimento(partida, origem, destino, jogadorId) {
    const peca = partida.tabuleiro[origem.linha][origem.coluna];
    
    if (!peca) {
        return { valido: false, mensagem: "N√£o h√° pe√ßa na posi√ß√£o de origem!" };
    }
    
    const ehBranco = jogadorId === partida.jogadorBranco;
    const pecasDoJogador = ehBranco ? [PECA_BRANCA, DAMA_BRANCA] : [PECA_PRETA, DAMA_PRETA];
    
    if (!pecasDoJogador.includes(peca)) {
        return { valido: false, mensagem: "Essa pe√ßa n√£o √© sua!" };
    }
    
    if (partida.tabuleiro[destino.linha][destino.coluna] !== VAZIO) {
        return { valido: false, mensagem: "A posi√ß√£o de destino j√° est√° ocupada!" };
    }
    
    if ((origem.linha + origem.coluna) % 2 === 0 || (destino.linha + destino.coluna) % 2 === 0) {
        return { valido: false, mensagem: "S√≥ √© poss√≠vel mover para casas escuras!" };
    }
    
    const deltaLinha = destino.linha - origem.linha;
    const deltaColuna = destino.coluna - origem.coluna;
    
    const ehDama = peca === DAMA_BRANCA || peca === DAMA_PRETA;
    
    const capturasDisponiveis = verificarCapturasDisponiveis(partida, jogadorId);
    
    if (Math.abs(deltaLinha) === 1 && Math.abs(deltaColuna) === 1) {
        if (capturasDisponiveis.length > 0) {
            return { valido: false, mensagem: "Captura obrigat√≥ria! Voc√™ deve capturar uma pe√ßa advers√°ria." };
        }
        
        if (!ehDama) {
            if (ehBranco && deltaLinha > 0) {
                return { valido: false, mensagem: "Pe√ßas brancas s√≥ movem para cima!" };
            }
            if (!ehBranco && deltaLinha < 0) {
                return { valido: false, mensagem: "Pe√ßas pretas s√≥ movem para baixo!" };
            }
        }
        
        return { valido: true, captura: false };
    }
    
    if (Math.abs(deltaLinha) === 2 && Math.abs(deltaColuna) === 2) {
        const linhaCaptura = origem.linha + deltaLinha / 2;
        const colunaCaptura = origem.coluna + deltaColuna / 2;
        const pecaCapturada = partida.tabuleiro[linhaCaptura][colunaCaptura];
        
        if (!pecaCapturada) {
            return { valido: false, mensagem: "N√£o h√° pe√ßa para capturar!" };
        }
        
        const pecasAdversarias = ehBranco ? [PECA_PRETA, DAMA_PRETA] : [PECA_BRANCA, DAMA_BRANCA];
        
        if (!pecasAdversarias.includes(pecaCapturada)) {
            return { valido: false, mensagem: "Voc√™ s√≥ pode capturar pe√ßas advers√°rias!" };
        }
        
        if (!ehDama) {
            if (ehBranco && deltaLinha > 0) {
                return { valido: false, mensagem: "Pe√ßas brancas s√≥ capturam para cima!" };
            }
            if (!ehBranco && deltaLinha < 0) {
                return { valido: false, mensagem: "Pe√ßas pretas s√≥ capturam para baixo!" };
            }
        }
        
        return { 
            valido: true, 
            captura: true, 
            posicaoCaptura: { linha: linhaCaptura, coluna: colunaCaptura }
        };
    }
    
    return { valido: false, mensagem: "Movimento inv√°lido! Use movimentos diagonais de 1 casa ou capturas de 2 casas." };
}

function verificarCapturasDisponiveis(partida, jogadorId) {
    const capturas = [];
    const ehBranco = jogadorId === partida.jogadorBranco;
    const pecasDoJogador = ehBranco ? [PECA_BRANCA, DAMA_BRANCA] : [PECA_PRETA, DAMA_PRETA];
    const pecasAdversarias = ehBranco ? [PECA_PRETA, DAMA_PRETA] : [PECA_BRANCA, DAMA_BRANCA];
    
    for (let linha = 0; linha < 8; linha++) {
        for (let coluna = 0; coluna < 8; coluna++) {
            const peca = partida.tabuleiro[linha][coluna];
            
            if (pecasDoJogador.includes(peca)) {
                const direcoes = [[2, 2], [2, -2], [-2, 2], [-2, -2]];
                
                for (const [dLinha, dColuna] of direcoes) {
                    const novaLinha = linha + dLinha;
                    const novaColuna = coluna + dColuna;
                    
                    if (novaLinha >= 0 && novaLinha < 8 && novaColuna >= 0 && novaColuna < 8) {
                        const linhaCaptura = linha + dLinha / 2;
                        const colunaCaptura = coluna + dColuna / 2;
                        const pecaCapturada = partida.tabuleiro[linhaCaptura][colunaCaptura];
                        
                        if (pecasAdversarias.includes(pecaCapturada) && 
                            partida.tabuleiro[novaLinha][novaColuna] === VAZIO) {
                            capturas.push({ origem: { linha, coluna }, destino: { linha: novaLinha, coluna: novaColuna } });
                        }
                    }
                }
            }
        }
    }
    
    return capturas;
}

function executarMovimento(partida, origem, destino, validacao) {
    const peca = partida.tabuleiro[origem.linha][origem.coluna];
    
    partida.tabuleiro[origem.linha][origem.coluna] = VAZIO;
    partida.tabuleiro[destino.linha][destino.coluna] = peca;
    
    if (validacao.captura && validacao.posicaoCaptura) {
        partida.tabuleiro[validacao.posicaoCaptura.linha][validacao.posicaoCaptura.coluna] = VAZIO;
    }
    
    validacao.coroou = false;
    if (peca === PECA_BRANCA && destino.linha === 0) {
        partida.tabuleiro[destino.linha][destino.coluna] = DAMA_BRANCA;
        validacao.coroou = true;
    }
    if (peca === PECA_PRETA && destino.linha === 7) {
        partida.tabuleiro[destino.linha][destino.coluna] = DAMA_PRETA;
        validacao.coroou = true;
    }
    
    partida.ultimoMovimento = { origem, destino };
}

function verificarVitoria(partida) {
    let pecasBrancas = 0;
    let pecasPretas = 0;
    
    for (let linha = 0; linha < 8; linha++) {
        for (let coluna = 0; coluna < 8; coluna++) {
            const peca = partida.tabuleiro[linha][coluna];
            if (peca === PECA_BRANCA || peca === DAMA_BRANCA) pecasBrancas++;
            if (peca === PECA_PRETA || peca === DAMA_PRETA) pecasPretas++;
        }
    }
    
    if (pecasPretas === 0) {
        partida.vencedor = partida.jogadorBranco;
    } else if (pecasBrancas === 0) {
        partida.vencedor = partida.jogadorPreto;
    }
}

async function mostrarTabuleiro(chatId) {
    const partida = partidasAtivas.get(chatId);
    
    if (!partida) {
        return {
            sucesso: false,
            mensagem: "‚ö†Ô∏è N√£o h√° partida ativa neste chat!\n\nüí° Use `.damas @oponente` para iniciar uma partida."
        };
    }
    
    const jogador1Nome = partida.jogadorBranco.split('@')[0];
    const jogador2Nome = partida.jogadorPreto.split('@')[0];
    const vezDeNome = partida.vezDe.split('@')[0];
    
    let pecasBrancas = 0;
    let pecasPretas = 0;
    
    for (let linha = 0; linha < 8; linha++) {
        for (let coluna = 0; coluna < 8; coluna++) {
            const peca = partida.tabuleiro[linha][coluna];
            if (peca === PECA_BRANCA || peca === DAMA_BRANCA) pecasBrancas++;
            if (peca === PECA_PRETA || peca === DAMA_PRETA) pecasPretas++;
        }
    }
    
    return {
        sucesso: true,
        mensagem: `üé≤ *JOGO DE DAMAS*

‚ôüÔ∏è *Jogadores:*
‚ö™ Brancas: @${jogador1Nome} (${pecasBrancas} pe√ßas)
‚ö´ Pretas: @${jogador2Nome} (${pecasPretas} pe√ßas)

üéØ *Vez de:* @${vezDeNome} (${partida.turno === 'branco' ? '‚ö™ Brancas' : '‚ö´ Pretas'})

üìä Movimento ${partida.movimentos}
‚è±Ô∏è ${Math.floor((Date.now() - partida.iniciado) / 1000)}s`,
        mentions: [partida.vezDe],
        imagem: gerarImagemTabuleiro(partida.tabuleiro, partida.turno)
    };
}

function pararPartida(chatId) {
    const partida = partidasAtivas.get(chatId);
    
    if (!partida) {
        return {
            sucesso: false,
            mensagem: "‚ö†Ô∏è N√£o h√° partida ativa neste chat!"
        };
    }
    
    const tempo = Math.floor((Date.now() - partida.iniciado) / 1000);
    partidasAtivas.delete(chatId);
    
    return {
        sucesso: true,
        mensagem: `üõë *Partida encerrada!*

‚è±Ô∏è Dura√ß√£o: ${tempo}s
üéØ Movimentos: ${partida.movimentos}

üéÆ Use \`.damas @oponente\` para jogar novamente!`
    };
}

function mostrarAjuda(prefix) {
    return {
        sucesso: true,
        mensagem: `üé≤ *JOGO DE DAMAS - REGRAS*

üìç *Como jogar:*
‚Ä¢ Pe√ßas movem na diagonal
‚Ä¢ Brancas movem para cima (‚ö™‚Üë)
‚Ä¢ Pretas movem para baixo (‚ö´‚Üì)
‚Ä¢ Capturas s√£o obrigat√≥rias
‚Ä¢ Ao chegar no fim, vira dama üëë
‚Ä¢ Damas movem em qualquer dire√ß√£o

üéØ *Comandos:*
\`${prefix}damas @oponente\` - Iniciar partida
\`${prefix}damasjogada origem destino\` - Fazer jogada
\`${prefix}damastabuleiro\` - Ver tabuleiro
\`${prefix}damasparar\` - Encerrar partida

üìã *Exemplos de jogadas:*
\`${prefix}damasjogada c3 d4\` - Mover pe√ßa
\`${prefix}damasjogada c3 e5\` - Capturar pe√ßa

üìç *Coordenadas:*
Colunas: a-h (esquerda ‚Üí direita)
Linhas: 1-8 (baixo ‚Üí cima)

üèÜ *Vit√≥ria:*
Capture todas as pe√ßas do advers√°rio!`
    };
}

function gerarTabuleiroTexto(tabuleiro, ultimoMovimento = null) {
    let texto = '```\n   a  b  c  d  e  f  g  h\n';
    
    for (let linha = 0; linha < 8; linha++) {
        texto += `${8 - linha} `;
        for (let coluna = 0; coluna < 8; coluna++) {
            const peca = tabuleiro[linha][coluna];
            const casaEscura = (linha + coluna) % 2 === 1;
            
            let simbolo = ' ';
            if (casaEscura) {
                if (peca === PECA_BRANCA) simbolo = '‚ö™';
                else if (peca === PECA_PRETA) simbolo = '‚ö´';
                else if (peca === DAMA_BRANCA) simbolo = '‚ôî';
                else if (peca === DAMA_PRETA) simbolo = '‚ôö';
                else simbolo = '‚ñ™';
            } else {
                simbolo = '‚ñ°';
            }
            
            texto += ` ${simbolo} `;
        }
        texto += `${8 - linha}\n`;
    }
    
    texto += '   a  b  c  d  e  f  g  h\n```';
    return texto;
}

function converterTabuleiroParaFEN(tabuleiro) {
    let fen = '';
    
    for (let linha = 0; linha < 8; linha++) {
        let vazios = 0;
        for (let coluna = 0; coluna < 8; coluna++) {
            const peca = tabuleiro[linha][coluna];
            
            if (peca === VAZIO) {
                vazios++;
            } else {
                if (vazios > 0) {
                    fen += vazios;
                    vazios = 0;
                }
                
                if (peca === PECA_BRANCA) fen += 'w';
                else if (peca === PECA_PRETA) fen += 'b';
                else if (peca === DAMA_BRANCA) fen += 'W';
                else if (peca === DAMA_PRETA) fen += 'B';
            }
        }
        
        if (vazios > 0) fen += vazios;
        if (linha < 7) fen += '/';
    }
    
    return fen;
}

async function gerarImagemTabuleiro(tabuleiro, turno) {
    try {
        const fen = converterTabuleiroParaFEN(tabuleiro);
        const url = `https://api.checklyhq.com/v1/snippets/render-image?url=${encodeURIComponent('https://checkerboard-api.herokuapp.com/board?fen=' + fen)}`;
        
        return url;
    } catch (error) {
        console.error("Erro ao gerar imagem:", error);
        return null;
    }
}

module.exports = {
    iniciarPartida,
    fazerJogada,
    mostrarTabuleiro,
    pararPartida,
    mostrarAjuda,
    partidasAtivas
};
